/*
ID: bdsomme1
LANG: JAVA
TASK: stall4
*/

import java.io.*;
import java.util.*;

class stall4{
	public static void main (String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("stall4.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("stall4.out")));
		StringTokenizer reader = new StringTokenizer(f.readLine());
		int cows = Integer.parseInt(reader.nextToken());
		int stalls = Integer.parseInt(reader.nextToken());
		int[][] adj = new int[cows + stalls + 3][cows + stalls + 3];
		for(int i = 2; i < cows + 2; i++)
		{
			reader = new StringTokenizer(f.readLine());
			int choices = Integer.parseInt(reader.nextToken());
			for(int j = 0; j < choices; j++)
			{
				adj[i][Integer.parseInt(reader.nextToken()) + cows + 1] = 1;
			}
			adj[1][i] = 1;
		}
		for(int j = cows + 2; j < cows + stalls + 2; j++)
		{
			adj[j][cows + stalls + 2] = 1;
		}
		
		out.println(algorithm(adj, cows + stalls + 2));
		out.close();
		
		}
		
		public static int algorithm(int[][] adj, int nodes)
		{
			int total = 0;
			int[] previous = new int[nodes + 1];
			while(true)
			{
				int[] flow = new int[nodes + 1];
				boolean[] visited = new boolean[nodes + 1];
				flow[1] = 10000000;
				while(true)
				{
					int maxflow = 0;
					int maxplace = 0;
					for(int i = 1; i <= nodes; i++)
					{
						if(flow[i] > maxflow && !visited[i])
						{
							maxflow = flow[i];
							maxplace = i;
						}
					}
					if(maxplace == 0)
					{
						break;
					}
						visited[maxplace] = true;
						for(int i = 1; i <= nodes; i++)
						{
							if(!visited[i])
							{
								int num = Math.min(maxflow, adj[maxplace][i]);
								if(num > flow[i])
								{
									flow[i] = num;
									previous[i] = maxplace;
								}
							}
						}
				}
				if(flow[nodes] == 0)
					break;
					
				total += flow[nodes];
				int i = nodes;
				while(i != 1)
				{
					int p = previous[i];
					adj[p][i] -= flow[nodes];
					adj[i][p] += flow[nodes];
					i=p;
				}
			}
			return total;
		}
}