/*
ID: bdsomme1
LANG: JAVA
TASK: shuttle
*/
import java.io.*;
import java.util.*;

class shuttle{
	public static void main (String[] args) throws IOException {
		BufferedReader f = new BufferedReader(new FileReader("shuttle.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("shuttle.out")));
		int n = Integer.parseInt(f.readLine());
		
		int[] moves = algorithm(n);
		for(int i = 1; i <= moves[0]; i++)
		{
			out.print(moves[i]);
			if(i % 20 != 0 && i != moves[0])
			{
				out.print(" ");
			}
			else
			{
				out.println();
			}
		}
		out.close();
	}
	
	public static boolean done(int[] board, int n)
	{
		if(board[n+1] != 0)
			return false;
		for(int i = 1; i <= n; i++)
		{
			if(board[i] == -1 || board[2 * n + 2 - i] == 1)
			{
				return false;
			}
		}
		return true;
	}
	
	public static int[] algorithm (int n)
	{
		int[] board = new int[2 * n + 2];
		for(int i = 1; i <= n; i++)
		{
			board[i] = -1;
			board[2 * n + 2 - i] = 1;
		}
		board[0] = n+1;
		int[] moves = new int[100000];
		boolean white = true;
		
		while(!done(board, n))
		{
			if(white)
			{
				if(board[0] != 1 && board[board[0] - 1] == -1)
				{
					board[board[0]] = -1;
					board[board[0] - 1] = 0;
					board[0]--;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
				}
				boolean hopped = false;
				while(board[0] > 2 && board[board[0] - 1] == 1 && board[board[0] - 2] == -1)
				{
					board[board[0]] = -1;
					board[board[0] - 2] = 0;
					board[0] -= 2;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
					hopped = true;
				}
				if(board[0] != 1 && board[board[0] - 1] == -1 && hopped)
				{
					board[board[0]] = -1;
					board[board[0] - 1] = 0;
					board[0]--;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
				}
				white = false;
			}
			else
			{
				if(board[0] != 2 * n + 1 && board[board[0] + 1] == 1)
				{
					board[board[0]] = 1;
					board[board[0] + 1] = 0;
					board[0]++;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
				}
				boolean hopped = false;
				while(board[0] < 2*n && board[board[0] + 1] == -1 && board[board[0] + 2] == 1)
				{
					board[board[0]] = 1;
					board[board[0] + 2] = 0;
					board[0] += 2;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
					hopped = true;
				}
				if(board[0] != 2 * n + 1 && board[board[0] + 1] == 1 && hopped)
				{
					board[board[0]] = 1;
					board[board[0] + 1] = 0;
					board[0]++;
					moves[moves[0] + 1] = board[0];
					moves[0]++;
				}
				white = true;
			}
		}
		
		
		
		return moves;
	}
	
}