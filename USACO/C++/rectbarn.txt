/*
ID: bdsomme1
TASK: rectbarn
LANG: C++                 
*/
#include <iostream>
#include <fstream>
#include <string>
#include <bits/stdc++.h> 

using namespace std;

int rows, cols, p;
int highest = 0;
bool broken[3000][3000];
int height[3000], le[3000], ri[3000];

void algorithm ()
{
    int k;
    for(int i = 0; i < rows; i++)
    {
        k = 0;
        for(int j = 0; j < cols; j++)
        {
            if(broken[i][j])
            {
                le[j] = 0;
                height[j] = 0;
                k = 0;
            }
            else
            {
                k++;
                if(le[j] == 0)
                {
                    le[j] = k;
                }
                else
                {
                    le[j] = min(k, le[j]);
                }
                height[j]++;
            }
            
        }
        k = 0;
        for(int j = cols - 1; j >= 0; j--)
        {
            if(broken[i][j])
            {
                ri[j] = 0;
                k = 0;
                continue;
            }
            else
            {
                k++;
                if(ri[j] == 0)
                {
                    ri[j] = k;
                }
                else
                {
                    ri[j] = min(k, ri[j]);
                }
                highest = max(highest, height[j] * (le[j] + ri[j] - 1));
            }
        }
    }
}

int main() {
    FILE *fin, *fout;
	fin = fopen("rectbarn.in", "r");
	fout = fopen("rectbarn.out", "w");
    
	fscanf(fin, "%d %d %d", &rows, &cols, &p);


    for(int i = 0; i < p; i++)
    {
        int row, col;
        fscanf(fin, "%d %d", &row, &col);
        broken[row-1][col-1] = true;
    }

	algorithm();
    fprintf(fout, "%d", highest);
    fprintf(fout, "\n");
	fclose(fin);
    fclose(fout);	
    return 0;
}